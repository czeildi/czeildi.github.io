<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on experiments with R</title>
    <link>/post/</link>
    <description>Recent content in Posts on experiments with R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Downloadable ggplots in shiny</title>
      <link>/2018/02/11/downloadable-ggplots-in-shiny/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/11/downloadable-ggplots-in-shiny/</guid>
      <description>A use-case for shiny modules Plotly comes with a built-in download option for every plot, but what if you would like to provide a similar functionality to multiple ggplot2 plots in your shiny app? I will show you that with modules you can simplify the code.
Without modules Your code in ui might look like this:
# ui.R # ... numericInput(&amp;quot;sample_ratio&amp;quot;, ...), plotOutput(&amp;quot;mtcars&amp;quot;), downloadButton(&amp;quot;mtcars_download&amp;quot;), plotOutput(&amp;quot;iris&amp;quot;), downloadButton(&amp;quot;iris_download&amp;quot;), and your code in server might look like this:</description>
    </item>
    
    <item>
      <title>merge on factor column</title>
      <link>/2017/11/30/merge-on-factor-column/</link>
      <pubDate>Thu, 30 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/11/30/merge-on-factor-column/</guid>
      <description>library(&amp;quot;forcats&amp;quot;) library(&amp;quot;data.table&amp;quot;) library(&amp;quot;magrittr&amp;quot;) I recently started working with factors in R and found the forcats package amazing. However, I did not found much documentation on merging two data frames on a factor column so I made small examples and observed the behavior.
same levels, different order In abc order: natural if converting from already ordered character.
dt_abc &amp;lt;- data.table(size = as_factor(c(&amp;quot;big&amp;quot;, &amp;quot;medium&amp;quot;, &amp;quot;tiny&amp;quot;))) levels(dt_abc$size) ## [1] &amp;quot;big&amp;quot; &amp;quot;medium&amp;quot; &amp;quot;tiny&amp;quot; We can define the natural order:</description>
    </item>
    
    <item>
      <title>custom ggplot2 theme</title>
      <link>/2017/10/15/custom-ggplot2-theme/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/15/custom-ggplot2-theme/</guid>
      <description>I spoke about custom ggplot2 themes at the last BURN meetup. My slides are available here but I will give you a somewhat extended summary here. A custom theme could come in handy both in academia and industry to ensure a consistent style.
Motivation As easy as it is to generate meaningful and complex charts with ggplot2 it can be tedious to control every detail of your chart to make it publication-ready.</description>
    </item>
    
    <item>
      <title>R package check with Docker on Codeship</title>
      <link>/2017/09/17/r-pkg-check-with-docker-on-codeship/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/09/17/r-pkg-check-with-docker-on-codeship/</guid>
      <description>Motivation At Emarsys we have several internal private R packages which are essential to our day-to-day work. They are also under constant development. We want to work on these in a collaborative and safe way. Fast and trustworthy CI &amp;amp; CD are essential: they reduce the cost and risk of adding a small but useful feature to one of our packages.
Although in the R community Travis is the standard for CI, at Emarsys the whole company uses Codeship happily so we wanted to give it a go.</description>
    </item>
    
    <item>
      <title>shiny app as R package v2</title>
      <link>/2017/08/16/shiny-app-as-r-package-v2/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/16/shiny-app-as-r-package-v2/</guid>
      <description>In my previous post I explored the possibility of wrapping a shiny app as an R package. I falsely stated that you cannot have a directory-based shiny app with global.R. Based on this question on Stack Overflow I proved the contrary. It is actually possible but with serious limitations in my opinion so I still strongly advise the function based approach.
You can put basically anything in the inst folder of your package and use those as is.</description>
    </item>
    
    <item>
      <title>shiny app as R package</title>
      <link>/2017/08/09/shiny-app-as-r-package/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/09/shiny-app-as-r-package/</guid>
      <description>Background I love and use shiny regularly and I also try to modularize my work more and more. Naturally I started to wonder whether I could have a whole shiny app as an R package and then possibly a project organizing multiple apps together. The answer is yes as I suspected.
Several others already wrote about the topic, including Dean Attali and William Landau. However, I gained a deeper understanding by trying things out myself.</description>
    </item>
    
    <item>
      <title>R pkg development alongside packrat</title>
      <link>/2017/08/02/r-pkg-development-alongside-packrat/</link>
      <pubDate>Wed, 02 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/08/02/r-pkg-development-alongside-packrat/</guid>
      <description>I use packrat for all my projects at Emarsys so for our internal packages as well as it eases collaboration. During package development there are numerous packages which come handy during development but not needed for usage. These are usually listed under the Suggests or Enhances field in the DESCRIPTION file. But should these be tracked with packrat as well?
In my opinion, it depends. If it is testthat or roxygen2 probably everyone contributing to the package will use it so it makes sense to track with packrat.</description>
    </item>
    
    <item>
      <title>modals for settings in shiny</title>
      <link>/2017/06/17/modals-for-settings-in-shiny/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/06/17/modals-for-settings-in-shiny/</guid>
      <description>For some time I have been wondering about the best way to hide more advanced settings from the regular user of your app. I have some apps with many different filters and options, all of which I want to keep because they have their legitimate usage. However, they take up valuable space and also confuse the user who does not need advanced options at the moment.
I also learned about the possibility of using modals and wondered whether there is a use case waiting to be solved.</description>
    </item>
    
    <item>
      <title>the dot symbol</title>
      <link>/2017/01/28/the-dot-symbol/</link>
      <pubDate>Sat, 28 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/01/28/the-dot-symbol/</guid>
      <description>The dot . appears in different places in the R ecosystem: e.g. purrr, magrittr’s %&amp;gt;%. I will explore and explain what happens if you mix these usages, or nest them, how the dot symbol is special and how it is not.
Basic usage %&amp;gt;% of magrittr You should use the dot if the parameter you pipe forward is not the first parameter of your next function or if you use pipe with data.</description>
    </item>
    
    <item>
      <title>ggplot2: exploration of the group aesthetics</title>
      <link>/2017/01/08/ggplot2-exploration-of-the-group-aesthetics/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/01/08/ggplot2-exploration-of-the-group-aesthetics/</guid>
      <description>I have made several plots with ggplot2 in the past 2 years and occasionally got errors related to the group aesthetics. I solved these issues without once taking the time to fully understand how the group aesthetic works. This blogpost is a result of my experiments to finally explore how it works. My understanding is a combination of my experiments and Hadley Wickhams outstanding book about ggplot2. (https://github.com/hadley/ggplot2-book)
Scenario 1: mapping based on one variable Our dummy data will be a unit square.</description>
    </item>
    
  </channel>
</rss>
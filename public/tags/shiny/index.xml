<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny on experiments with R</title>
    <link>https://ildiczeller.com/tags/shiny/</link>
    <description>Recent content in Shiny on experiments with R</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ildiczeller.com/tags/shiny/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Downloadable ggplots in shiny</title>
      <link>https://ildiczeller.com/2018/02/11/downloadable-ggplots-in-shiny/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ildiczeller.com/2018/02/11/downloadable-ggplots-in-shiny/</guid>
      <description>A use-case for shiny modules Plotly comes with a built-in download option for every plot, but what if you would like to provide a similar functionality to multiple ggplot2 plots in your shiny app? I will show you that with modules you can simplify the code.
Without modules Your code in ui might look like this:
# ui.R # ... numericInput(&amp;quot;sample_ratio&amp;quot;, ...), plotOutput(&amp;quot;mtcars&amp;quot;), downloadButton(&amp;quot;mtcars_download&amp;quot;), plotOutput(&amp;quot;iris&amp;quot;), downloadButton(&amp;quot;iris_download&amp;quot;), and your code in server might look like this:</description>
    </item>
    
    <item>
      <title>shiny app as R package v2</title>
      <link>https://ildiczeller.com/2017/08/16/shiny-app-as-r-package-v2/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ildiczeller.com/2017/08/16/shiny-app-as-r-package-v2/</guid>
      <description>In my previous post I explored the possibility of wrapping a shiny app as an R package. I falsely stated that you cannot have a directory-based shiny app with global.R. Based on this question on Stack Overflow I proved the contrary. It is actually possible but with serious limitations in my opinion so I still strongly advise the function based approach.
You can put basically anything in the inst folder of your package and use those as is.</description>
    </item>
    
    <item>
      <title>shiny app as R package</title>
      <link>https://ildiczeller.com/2017/08/09/shiny-app-as-r-package/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ildiczeller.com/2017/08/09/shiny-app-as-r-package/</guid>
      <description>Background I love and use shiny regularly and I also try to modularize my work more and more. Naturally I started to wonder whether I could have a whole shiny app as an R package and then possibly a project organizing multiple apps together. The answer is yes as I suspected.
Several others already wrote about the topic, including Dean Attali and William Landau. However, I gained a deeper understanding by trying things out myself.</description>
    </item>
    
    <item>
      <title>modals for settings in shiny</title>
      <link>https://ildiczeller.com/2017/06/17/modals-for-settings-in-shiny/</link>
      <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ildiczeller.com/2017/06/17/modals-for-settings-in-shiny/</guid>
      <description>For some time I have been wondering about the best way to hide more advanced settings from the regular user of your app. I have some apps with many different filters and options, all of which I want to keep because they have their legitimate usage. However, they take up valuable space and also confuse the user who does not need advanced options at the moment.
I also learned about the possibility of using modals and wondered whether there is a use case waiting to be solved.</description>
    </item>
    
  </channel>
</rss>